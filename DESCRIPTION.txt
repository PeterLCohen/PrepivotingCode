README

Authors: Peter L. Cohen (MIT) & Colin B. Fogarty (MIT)

This software accompanies ``Gaussian Prepivoting for Finite Population Causal Inference" (Cohen & Fogarty).  A freely available copy of the paper is available at https://arxiv.org/abs/2002.06654.

################################################################################
                Example Implementations for Gaussian Prepivoting
################################################################################
Two different example implementations of Gaussian prepivoting are provided.
  *) Response_ExampleCode.ipynb is a Jupyter notebook with a walkthrough of the theory of Gaussian prepivoting demonstrated through the example of the absolute difference in means
  *) CodeForInpaper.R is an implementation of Gaussian prepivoting for the absolute difference in means with a modular structure designed to generalize to other user-defined test statistics

################################################################################
                          Reproducing Paper Results
################################################################################

To generate the results for Table 1 of the paper run:
  *) RerandomizationSharp_DataSimulator.R to create the sharp null rows (change N to the desired population size)
  *) RerandomizationWeak_DataSimulator.R to create the weak null rows (change N to the desired population size)

To generate the results for Table 2 of the paper run:
  *) SharpNull_DataSimulator.R to create the sharp null rows (change N to the desired population size)
  *) WeakNull_DataSimulator.R to create the weak null rows (change N to the desired population size)

To generate the results for additional simulations of the supplementary material:
  *) Repeat the procedure for generating Table 2, but change ``tau" and ``taubar" to match the desired treatment effects (change alpha to 0.25)
  *) With these modifications, SharpNull_DataSimulator.R generates the constant effects power simulations and WeakNull_DataSimulator.R generates the additional Type I error rate simulations and the additive effects power simulations

To generate the figures of the paper run:
  *) Run SharpNull_DataSimulator.R at N = 50 and save the results as rerandN50sharp (just modify the save command in the script to specify the new filename)
  *) Run SharpNull_DataSimulator.R at N = 1000 and save the results as rerandN1000sharp
  *) Run WeakNull_DataSimulator.R at N = 50 and save the results as rerandN50weak (just modify the save command in the script to specify the new filename)
  *) Run WeakNull_DataSimulator.R at N = 1000 and save the results as rerandN1000weak
  *) Run PlotGenerator.R in the same directory that you saved the data
  
To recreate the data analysis section of the paper:
  *) Obtain the Angrist et al. (2009) STAR dataset from https://www.aeaweb.org/articles?id=10.1257/app.1.1.136
  *) Save the file "STAR_public_use.dta" to the directory of your choice
  *) Run "ALO_GaussianPrepivotingAnalysis.R"
  
################################################################################
                                General Notes
################################################################################
The algorithms provided are stochastic approximations to Algorithm 1 of Cohen & Fogarty (2021); they rely upon Monte-Carlo approximation.  For practitioners seeking to use the code above as a template for custom analyses of their interest this presents the standard trade-off between runtime and reduction of Monte-Carlo error.  Practitioners are advised to select the number of Monte-Carlo simulations to be high enough to observe stable output (perhaps by running the algorithm a few times with increasing numbers of Monte-Carlo simulations) while maintaining reasonable runtime on their machine.
